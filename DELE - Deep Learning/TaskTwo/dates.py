# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10EJ9nc2APmxJWGZ6fsW8glBcACdW5eeG
"""

# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14RpXX-7k2_JKDCzvsgA9MHbB-ES-Pita
"""
import numpy as np
import warnings
warnings.filterwarnings("ignore", "\nPyarrow", DeprecationWarning)
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go

# Cargar datos
data = pd.read_csv('Speed Dating Data.csv', encoding="ISO-8859-1")

# Filtrar solo columnas numéricas
numeric_columns = data.select_dtypes(include=[np.number])

# Función para calcular la Mediana Absoluta de la Desviación (MAD)
def mad(data):
    median = data.median()
    return (data - median).abs().median()

# Estadísticas
stats = {
    'Mean': numeric_columns.mean(),
    'Mode': numeric_columns.mode().iloc[0],
    'Standard Deviation': numeric_columns.std(),
    'Sum': numeric_columns.sum(),
    'Median Absolute Deviation': mad(numeric_columns),
    'Coefficient of Variation': numeric_columns.std() / numeric_columns.mean(),
    'Kurtosis': numeric_columns.kurtosis(),
    'Skewness': numeric_columns.skew()
}

# Crear DataFrame con estadísticas
table = pd.DataFrame(stats)

# Imprimir estadísticas
print(table)

# Mapa de calor de correlación en rojo
corr_matrix = data.corr()
plt.figure(figsize=(12, 10))
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm")
plt.title("Mapa de Calor de Correlación")
plt.show()

# Datos faltantes
plt.figure(figsize=(10, 8))
sns.heatmap(data.isnull(), cbar=False, cmap='viridis')
plt.title("Datos Faltantes")
plt.show()

# Descripción estadística
description = data.describe()
print(description)

# Distribución de datos
data.hist(figsize=(12, 10))
plt.suptitle('Data Distribution', y=1.02)
plt.show()

# Diagrama de pares
#numeric_columns = data.select_dtypes(include=[np.number])

# Crear diagrama de pares con Plotly Express
fig = px.scatter_matrix(numeric_columns)

# Mostrar el gráfico
fig.update_layout(title_text="Diagrama de Pares")
fig.show()

# Diagrama lineal
def line_plot(data):
    # Filtrar solo columnas numéricas
    # numeric_columns = data.select_dtypes(include=[np.number])

    # Seleccionar dos columnas numéricas para el gráfico de líneas
    if len(numeric_columns) >= 2:
        x_column, y_column = numeric_columns.columns[:2]

        # Crear gráfico de líneas
        plt.figure(figsize=(12, 8))
        sns.lineplot(x=x_column, y=y_column, data=data)
        plt.title("Diagrama de Líneas")
        plt.show()
    else:
        print("No hay suficientes columnas numéricas para generar el gráfico de líneas.")

# Llamar a la función
line_plot(data)

# Diagrama circular
def pie_chart(data):
    # Seleccionar la primera columna categórica
    categorical_columns = data.select_dtypes(include=['object']).columns
    if len(categorical_columns) > 0:
        column_name = categorical_columns[0]

        # Calcular recuento de valores
        value_counts = data[column_name].value_counts()

        # Crear gráfico circular con Plotly Express
        fig = px.pie(values=value_counts, names=value_counts.index, title=f"Gráfico Circular - {column_name}",
                     labels={'names': column_name, 'values': 'Count'}, hole=0.4)

        # Mostrar el gráfico
        fig.show()
    else:
        print("No hay columnas categóricas en el DataFrame.")

# Llamar a la función con el DataFrame completo
pie_chart(data)

# Visualizar gráfico de barras (bar plot)
for column in data.columns:
    plt.figure(figsize=(10, 6))
    sns.countplot(x=column, data=data, palette='viridis')
    plt.title(f'Bar Plot - {column}')
    plt.show()

# Visualizar gráfico de dispersión (scatter plot)
for i, column1 in enumerate(numeric_columns.columns):
    for j, column2 in enumerate(numeric_columns.columns):
        if i < j:
            plt.figure(figsize=(10, 8))
            sns.scatterplot(x=column1, y=column2, data=data)
            plt.title(f'Scatter Plot - {column1} vs {column2}')
            plt.show()

# Visualizar sumario estadístico
summary = data.describe()
print(summary)

# Visualizar gráfico de caja (box plot)
plt.figure(figsize=(10, 6))
sns.boxplot(data=data)
plt.title('Box Plot')
plt.show()